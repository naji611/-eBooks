name: Build and Deploy eBook App

on:
  push:
    branches:
      - main  # Trigger on push to the main branch (you can change this if needed)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up Docker Buildx (for better support)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get version from the commit hash and generate an image tag
      - name: Extract Version & Commit Hash
        id: vars
        run: |
          VERSION="1.0.0"  # Define your versioning scheme (auto or manual)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_TAG="${VERSION}-${COMMIT_HASH}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build --no-cache -t naji611/ebook-app:${{ env.IMAGE_TAG }} .
          docker tag naji611/ebook-app:${{ env.IMAGE_TAG }} naji611/ebook-app:latest

      # Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push naji611/ebook-app:${{ env.IMAGE_TAG }}
          docker push naji611/ebook-app:latest

      # Deploy to EC2 (SSH into EC2, pull new image, and restart container)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}  # Your EC2 instance IP or domai
          username: ubuntu              # Your EC2 SSH username
          key: ${{ secrets.EC2_SSH_KEY }}  # The SSH private key (stored in GitHub secrets)
          script: |
            # Stop and remove the old container
            docker stop ebook-app || true
            docker rm ebook-app || true

            # Pull the latest Docker image (with the correct tag)
            docker pull naji611/ebook-app:${{ env.IMAGE_TAG }}

            # Run the new container
            docker run -d -p 3000:3000 --name ebook-app naji611/ebook-app:${{ env.IMAGE_TAG }}
